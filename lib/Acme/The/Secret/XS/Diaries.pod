# PODNAME: Acme::The::Secret::XS::Diaries
# ABSTRACT: XS experiments of an XS n00b

=head1 Diary of learning XS

=head2 Day 1 - hello world

=head3 About

I read the first chapters of C<perlxstut>, minimalized the
instructions a bit and adapted it to L<Dist::Zilla|Dist::Zilla>.

=head3 Create a project

 $ dzil new Acme::The::Secret::XS::Diaries
 $ cd Acme-The-Secret-XS-Diaries
 $ git init
 $ git add lib/Acme/The/Secret/XS/Diaries.pm
 $ git add dist.ini
 $ git add Changes
 $ git add .gitignore
 $ git commit -m"initial project"

=head3 Create an XS file

Put a file into your project's top dir and name it after the last name
of your package, here C<Diaries.xs>:

 #include "EXTERN.h"
 #include "perl.h"
 #include "XSUB.h"
 
 #include "ppport.h"
 
 MODULE = Acme::The::Secret::XS::Diaries       PACKAGE = Acme::The::Secret::XS::Diaries
 
 void
 hello()
         CODE:
                 printf("Hello, world!\n");

=head3 Create a ppport.h file

The include file C<ppport.h> is something magic that you need to
create with this command inside your project's top dir:

 $ perl -MDevel::PPPort -eDevel::PPPort::WriteFile

=head3 Add XSLoader to your Perl module

Open your project's Perl module C<lib/Acme/The/Secret/XS/Diaries.pm>
and add the two XSLoader lines to it so the file looks like this:

 use strict;
 use warnings;
 
 package Acme::The::Secret::XS::Diaries;
 # ABSTRACT: Experiments of an XS n00b
 
 require XSLoader;
 XSLoader::load();
 
 1;

=head3 Create a test file

We run our module in a test file C<t/diaries.t> like this:

 #! /usr/bin/perl
 use Acme::The::Secret::XS::Diaries;
 use Test::More;
 
 Acme::The::Secret::XS::Diaries::hello();
 
 ok(1);
 done_testing;
 
=head3 Test it

With XS you must compile your distribution first before you can use
it. We do the whole build+test this way:

 $ dzil test --verbose

You get an output like this:

 [---snip---]
 t/diaries.t ............... 
 ok 1
 1..1
 Hello, world!
 ok
 [---snap---]

=head3 Done

That's it for day 1.

