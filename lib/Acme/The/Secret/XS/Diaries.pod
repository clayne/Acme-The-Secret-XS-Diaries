# PODNAME: Acme::The::Secret::XS::Diaries
# ABSTRACT: XS experiments of an XS n00b

=head1 Diary of learning XS

=head2 Day 1 - hello world

=head3 About

I read the first chapters of C<perlxstut>, minimalized the
instructions a bit and adapted it to L<Dist::Zilla|Dist::Zilla>.

=head3 Create a project

 $ dzil new Acme::The::Secret::XS::Diaries
 $ cd Acme-The-Secret-XS-Diaries
 $ git init
 $ git add lib/Acme/The/Secret/XS/Diaries.pm
 $ git add dist.ini
 $ git add Changes
 $ git add .gitignore
 $ git commit -m"initial project"

=head3 Create an XS file

Put a file into your project's top dir and name it after the last name
of your package, here C<Diaries.xs>:

 #include "EXTERN.h"
 #include "perl.h"
 #include "XSUB.h"
 
 #include "ppport.h"
 
 MODULE = Acme::The::Secret::XS::Diaries       PACKAGE = Acme::The::Secret::XS::Diaries
 
 void
 hello()
         CODE:
                 printf("Hello, world!\n");

=head3 Create a ppport.h file

The include file C<ppport.h> is something magic that you need to
create with this command inside your project's top dir:

 $ perl -MDevel::PPPort -eDevel::PPPort::WriteFile

=head3 Add XSLoader to your Perl module

Open your project's Perl module C<lib/Acme/The/Secret/XS/Diaries.pm>
and add the two XSLoader lines to it so the file looks like this:

 use strict;
 use warnings;
 
 package Acme::The::Secret::XS::Diaries;
 # ABSTRACT: Experiments of an XS n00b
 
 require XSLoader;
 XSLoader::load();
 
 1;

=head3 Create a test file

We run our module in a test file C<t/diaries.t> like this:

 #! /usr/bin/perl
 use Acme::The::Secret::XS::Diaries;
 use Test::More;
 
 Acme::The::Secret::XS::Diaries::hello();
 
 ok(1);
 done_testing;
 
=head3 Test it

With XS you must compile your distribution first before you can use
it. We do the whole build+test this way:

 $ dzil test --verbose

You get an output like this:

 [---snip---]
 t/diaries.t ...............
 ok 1
 1..1
 Hello, world!
 ok
 [---snap---]

=head3 Intermediate summary

Now we have a basic container to program XS, consisting of a frontend
Perl module, the actual XS file, and a test script to utilize it from
Perl space.

That's it for day 1.

=head2 Day 2 - Passing single arguments

=head3 Export functions

Not XS related but we better export symbols using
L<Sub::Exporter|Sub::Exporter> before we continue.
This allows great flexibility on what of and how
exactly to import our module later.

=head3 integer arguments

We add an C<is_even> function to XS file:

 int
 is_even(input)
         int input
         CODE:
                 RETVAL = (input % 2 == 0);
         OUTPUT:
                 RETVAL

and use it from Perl in the test script like this:

 is(is_even(0), 1, "0 -> even");
 is(is_even(1), 0, "1 -> uneven");
 is(is_even(2), 1, "2 -> even");

What changed?

=over 4

=item We just added an argument C<input>

...which is of type C<int>, declared in kind-of K&R style (i.e., just
name the argument it in function signature and define its type later)
and used it as usual in C.

=item We assign result to a variable C<RETVAL>

...which comes along already pre-declared with the return type of the
function (if that is not C<void>).

=item We declared an C<OUTPUT:> block

...which names the variable that contains our return value, here
C<RETVAL>.

=back

=head3 string arguments

We add a C<hello_to> function to XS file:

 void
 hello_to(someone)
         const char * someone
         CODE:
                 printf("Hello, %s!\n", someone);

and use it from Perl in the test script like this:

 hello_to("birne");

Magically this works out of the box. There is a data conversion
happening from Perl string to C<const char *> which is defined in a
I<typemap>.

=head3 Interlude: typemaps

Normally the mapping between Perl and C data structures is declared in
a so called I<typemap>. We could define that by ourself in a file
C<typemap> but we go with the default typemaps for a while, as there
is a collection of default mappings coming with Perl's ExtUtils. If
you are curious you can find them this way:

 cat $(perldoc -l ExtUtils::testlib | sed -e 's/testlib.pm/typemap/')

=over 4

=item In the first part it maps C types to names (which try to match
their Perl corresponding data structure names if possible).

=item The second part (after the C<INPUT> line) declares how to map
them from Perl to C (for input parameters).

=item The third part (after the C<OUTPUT> line) declares how to map
them from C to Perl (for return values).

=back

We return to typemaps when we really need one.

=head3 array ref argument

Let's exercise how to pass an arrayref and loop over its values. Here
the parameter is still a single one: the array ref; a non-ref array
would need to read from argument stack, which we will try later.

We add this code:

 void
 hello_to_persons_arrayref(persons)
         AV *persons;
         PREINIT:
                 I32    i;
                 I32    len;
                 SV**   element;
                 STRLEN str_len;
                 char * el_str;
                 I32    el_int;
         PPCODE:
                 len = av_len(persons);
                 printf("Hello, %d persons:\n", len+1);
                 for (i = 0; i <= len; i++) {
                     element = av_fetch(persons, i, 0);
                     if (element != NULL) {
                        if (SvPOK(*element)) {
                           el_str = SvPV(*element, str_len);
                           printf("  %d: Hello, %s!\n", i, el_str);
                        } else if (SvIOK(*element)) {
                           el_int = SvIV(*element);
                           printf("  %d: Hello, %d!\n", i, el_int);
                        } else {
                          printf("  %d: (ignored)\n", i);
                        }
                     }
                 }

What happens here? Essentially it does what in Perl would be:

 sub hello_to_persons_arrayref {
         my ($persons) = @_;
         printf("Hello, %d persons:\n", scalar @$persons);
         for (my $i = 0; $i < @$persons; $i++) {
                 printf("  %d: Hello, %s!\n", $i, $persons->[$i]);
         }
 }

=over 4

=item * Our argument is an C<AV>, an array value.

=item * Directly after that we declare all other non-argument variables
in a C<PREINIT>. The early declaration conforms to C89, the PREINIT
ensures it creates correct C code even in certain situations with
additionally generated typemap code.

=item * The most interesting variable is C<element> of type
C<SV**>. An C<SV> is a scalar, which is what an array (C<AV>) can
contain; the many C<*> arise from the type of the function
(C<av_fetch>) from which we get it returned.

=item * Now we iterate by using the index to access the elements
inside the array ref.

We get the last index with C<av_len>, do a for loop over that, and get
each element with C<av_fetch>. (Confusingly the function C<av_len>,
despite its name, does not return the length but the highest element
index.)

Now, each element contains a scalar (C<SV>) but it can be anything, so
we check for each type respectively: C<SvPOK> return true if the SV
contains a string, C<SvIOK> returns true if the SV contains an
integer, etc.

We then handle each type respectively. We convert it to the type with
C<SvPV> (scalar to string) or C<SvIV> (scalar to int) and use the
converted value with the corresponding printf format.

=back

=head3 hash ref argument

Let's do a similar thing with a hashref:

 void
 hello_to_persons_hashref(persons)
         HV *persons;
         PREINIT:
                 SV*    value;
                 char*  key;
                 I32    keylen;
                 STRLEN str_len;
                 char * el_str;
                 I32    el_int;
         PPCODE:
                 hv_iterinit(persons);
                 printf("Hello, unknown amount of persons:\n");
                 while (value = hv_iternextsv(persons, &key, &keylen)) {
                       if (SvPOK(value)) {
                          el_str = SvPV(value, str_len);
                          printf("  Hello, %s %s!\n", el_str, key);
                       } else if (SvIOK(value)) {
                          el_int = SvIV(value);
                          printf("  Hello, %d %s!\n", el_int, key);
                       } else {
                          printf("  (ignored) %s\n", key);
                       }
                 }

=over 4

=item * Our argument is an C<HV>, a hash value.

=item * We initialize an iterator with C<hv_iterinit>. (It's not
really clear why we don't get an actual iterator handle to use the
iterator but refer to the HV itself.)

=item * Note that here we don't know in advance how many person
elements we get. This will work again in a later example when we
iterate over a known array of keys.

=item * We loop with C<while> as long as the next iterator access
returns something.

=item * For iterator access we use a convenience function
C<hv_iternextsv> which gives us all info in one step: the actual value
and the key with its length.

=item * With the value SV it's now similar to our array loop above.

The scalar can be anything, so we check for each type respectively
with C<SvPOK>, C<SvIOK>, etc., and convert according to the recognized
type with C<SvPV> or C<SvIV>. With that we use a fitting printf
format.

=back

=head3 hash ref argument, accessed by keys

To see how to access a hash via keys we combine the last two lessons;
we loop over the array of keys and fetch hash elements by them:

 void
 hello_to_persons_hashref_by_keys(persons, keys)
         HV *persons;
         AV *keys;
         PREINIT:
                 I32    i;
                 I32    len;
                 SV**   key_el;
                 SV**   value;
                 char*  key;
                 STRLEN str_len;
                 char * el_str;
                 I32    el_int;
         PPCODE:
                 len = av_len(keys);
                 printf("Hello, %d persons:\n", len+1);
                 for (i = 0; i <= len; i++) {
                     key_el = av_fetch(keys, i, 0);
                     if (key_el != NULL && SvPOK(*key_el)) {
                           key = SvPV(*key_el, str_len);
                           value = hv_fetch(persons, key, strlen(key), 0);
                           if (SvPOK(*value)) {
                              el_str = SvPV(*value, str_len);
                              printf("  Hello, %s %s!\n", el_str, key);
                           } else if (SvIOK(*value)) {
                              el_int = SvIV(*value);
                              printf("  Hello, %d %s!\n", el_int, key);
                           } else {
                              printf("  (ignored) %s\n", key);
                           }
                     }
                 }

Here we first have to get the keys from our additional C<AV>
argument. We loop over them, get they actual key with C<av_fetch>,
check whether that key is really a string with C<SvPOK> and then get
the respective value from the hash with C<hv_fetch>. From there we
need to check for the type of the value and handle it with the
according printf.

=head3 Intermediate summary

We now know how to get and return scalar options, and can handle
scalars when they are single values or array/hash references.

That's it for day 2.

=head2 Day 3 - Multiple arguments and return values (via argument stack)

=head3 Extending the stack automatically

Returning multiple values works by pushing them to the stack. Use
C<PPCODE> to tell that you manage the return values on the argument
stack by yourself. Then use variants of the C<PUSH> macro according to
the type, in particular the C<mXPUSH...> forms. The C<X> variants take
care of implicit stack extension so you don't need to know in advance
by how many elements to extend, and the C<m> variants are for creating
I<mortal> values, i.e. values that are garbage collected once the
calling program got the values copied, to avoid memory leaks. This
makes C<mXPUSH> very convenient and Perlish.

For integers do this:

 void
 get_5_ints()
         PPCODE:
                 mXPUSHi(11);
                 mXPUSHi(33);
                 mXPUSHi(55);
                 mXPUSHi(77);
                 mXPUSHi(99);

For strings do it like this:

 void
 get_2_strings()
         INIT:
                 char * txt;
         PPCODE:
                 txt = "AFFE";
                 mXPUSHp(txt, strlen(txt));
                 txt = "ZOMTEC";
                 mXPUSHp(txt, strlen(txt));

Side note:

=over 4

=item * C<strlen()> is a C-ish thing, probably not enough for complete
Perl'ish and Unicode aware string handling. We will investigate later
on that.

=back

=head3 Extending the stack explicitely

For large, known-size return lists extending the stack explicitely in
one go is said to be faster. Use C<EXTEND> to pre-extend the stack and
the C<mPUSH> macros (without the C<X>):

 void
 get_5_ints_faster()
         PPCODE:
                 EXTEND(SP,5);
                 mPUSHi(11);
                 mPUSHi(33);
                 mPUSHi(55);
                 mPUSHi(77);
                 mPUSHi(99);

or respectively for strings:

 void
 get_2_strings_faster()
         INIT:
                 char * txt;
         PPCODE:
                 EXTEND(SP,2);
                 txt = "AFFE";
                 mPUSHp(txt, strlen(txt));
                 txt = "ZOMTEC";
                 mPUSHp(txt, strlen(txt));

=head3 Get multiple arguments from stack

Now let us read our arguments from the stack. We need this when we
don't know how many of them are incoming, like in C<foo(@args)>
function calls.

The new things here are the ellipsis C<...> in parameter list, the
variable C<items> which says how many arguments are on the stack
(including potentially other named args before the ellipsis), and the
stack accessor function C<ST(n)> to fetch the I<n>th element on the
stack.

Let's write a function that works like a C<grep> for all even numbers:

 void
 grep_even_integers(...)
         INIT:
                 int i;
                 SV* el;
                 int value;
         PPCODE:
                 for (i = 0; i < items; i++) {
                     el = ST(i);
                     if (SvIOK(el) || looks_like_number(el)) {
                        value = SvIV(el);
                        if (value % 2 == 0)
                           mXPUSHs(SvREFCNT_inc(el));
                     }
                 }

Besides the stack iteration using C<for>, C<items>, and C<ST()>, we
see that the loop body checks whether the scalar is either directly an
int or looks like a number, so we can convert it to an int to do the
modulo check.

The results are pushed onto the stack with the already known
C<mXPUSHs>. Note, we do not use C<mXPUSHi(value)> but push the
original SV, otherwise we would return the casted values.

To avoid garbage collection of the original SV we increment its ref
counter using C<SvREFCNT_inc()>.

Side notes:

=over 4

=item * Readability:

We could avoid the assignment to C<value> and then combine all C<if>
conditions into a single long C<if> but that would look unreadable.

=item * Correctness:

This code casts float numbers down to int, therefore treats I<6.1>
like I<6> during the modulo check. That isn't perfectly correct but it
is same behaviour in C/XS and in Perl, therefore we keep the example
this way.

=back

=head3 Intermediate summary

Now we know how to work on the stack to receive and send multiple
values. We have convenient macros to automatically extend the stack
size and can also explicitely pre-extend it. En passant we learned how
to check for numbers and how to increment a ref counter.

That's it for day 3.

=head2 Day 4 - Recursive functions

=head3 Preface

Be careful about the wording here as we need to clearly separate
between plain C functions and XS functions: the latter are called
I<xsub>s.

=head3 The challenge

The challenge with recursive functions is that our XS code creates
xsubs, which contain the glue code to be called from Perl. So from
inside ourself, i.e. from C, we either need to know how to call back
into ourself as Perl functions inclusive the calling overhead, or how
to avoid this calling overhead and do only the frontend call to an
xsub, and all the recursion only with pure C functions.

So the recursion problem is to understand the two aspects in
combination: the general call to a Perl function from XS, and the use
of the xsub only to initiate the recursion and deliver result at the
end.

=head3 Pure Perl recursive function call

Let's use the Fibonacci function as vehicle. In Perl it could look
like this:

 sub fib_pl {
         my ($n) = @_;
         return 1 if $n < 2;
         return fib_pl($n-2) + fib_pl($n-1);
 }

We will implement that in various ways in XS.

=head3 Naive recursive call: xsub from xsub

B<Warning>: This is a learning section only, it will do something
silly to demonstrate the mechanics. It's ok to skip it and directly
jump to the L<next chapter|/"xsub frontend, recursion in plain C">.

I<Inside an XS function fib()> we can not simply call C<fib()>
recursively because there is not really a C function of that name but
only a rewritten function with a "namespacified" name and additional
glue code for type conversions, stack handling, etc.. A C<fib()>
function exists I<only from a Perl point of view>.

Therefore, for now, we want to call ourself like we were called from
Perl, inclusive the whole argument stack exercise, like this:

 void
 fib_overkill(n)
         int n;
         INIT:
                 int f1;
                 int f2;
         PPCODE:
                 if (n < 2) {
                    mXPUSHi(1);
                 } else {
 
                    /* -------------------- f2 = fib(n-2) ----------------- */
                    ENTER;
                    SAVETMPS;
                    PUSHMARK(SP);
 
                    mXPUSHi(n-2);
 
                    PUTBACK;
 
                    call_pv("Acme::The::Secret::XS::Diaries::fib_overkill", 0);
 
                    SPAGAIN;
 
                    f2 = POPi;
 
                    PUTBACK;
                    FREETMPS;
                    LEAVE;
 
                    /* -------------------- f1 = fib(n-1) ----------------- */
                    ENTER;
                    SAVETMPS;
                    PUSHMARK(SP);
 
                    mXPUSHi(n-1);
 
                    PUTBACK;
 
                    call_pv("Acme::The::Secret::XS::Diaries::fib_overkill", 0);
 
                    SPAGAIN;
 
                    f1 = POPi;
 
                    PUTBACK;
                    FREETMPS;
                    LEAVE;
 
                    /* -------------------- f2 + f1 ----------------- */
                    mXPUSHi(f2+f1);
                 }

B<This is silly> for the actual Fibonacci efficiency but good for showing
the full mechanics of calling Perl functions. It does:

=over 4

=item * declare we take care of the stack by ourself by defining
return type C<void> and using C<PPCODE>

=item * declare an incoming argument C<n> for the B<n>th fibonacci number

=item * declare two auxiliary variables for the results of the
recursive calls with C<n-2> and C<n-1>

=item * for arguments C<n<2> push a result integer C<1> on the stack
and be done

=item * for other arguments recurse twice into ourself using C<ENTER>,
C<SAVETMPS>, C<PUSHMARK>, C<PUSH>, C<PUTBACK>, C<call_*>,
C<FREETMPS>, and C<LEAVE>, as follows:

=item * C<ENTER> is the opening bracket before a call

=item * C<SAVETMPS> creates a boundary for any temporary mortal
variables so only those are flushed at C<FREETMPS> but not other
mortals.

=item * C<PUSHMARK> puts a I<bookmark> (a "mental note") onto the
stack before we put arguments there. By this we mark where our local
stack starts. After that we actually (mX)C<PUSH> arguments. Unlike the
other macros, C<PUSHMARK> is always needed, even when we don't push
values on the stack.

=item * with C<PUTBACK> we then synchronize the global stack pointer
to be the same as our local stack pointer, so that the C<call_*> of
the function gets that prepared stack.

=item * C<call_pv()> is one of the several C<call_*> functions provided
as frontends to C<call_sv()>. The C<_pv>-variant prepares an SV of the
function to call from a string. The second parameter takes flags to
declare:

=over 4

=item - what the calling context is (C<G_VOID>, C<G_SCALAR>, C<G_ARRAY>),

=item - whether it places return values on the stack (C<G_DISCARD>),

=item - whether it expects args on the stack (C<G_NOARGS>),

=item - whether to trap errors by wrapping the call inside an eval{}
(C<G_EVAL>), and

=item - whether to keep a potential error during eval (C<G_KEEPERR>).

=back

=item * C<SPAGAIN> refreshes the local stack pointer after a C<call_*>
(as the respective memory might be reallocated during that)

=item * the second C<PUTBACK> again synchronize the global stack
pointer to our local stack pointer, because we C<POP>ed values from
the local stack.

=item * C<FREETMPS> gets rid of all temporary mortals that were
created since the last C<SAVETMPS>

=item * C<LEAVE> is the closing bracket after a call.

=back

This works but is obviously too canonical. Basically it changes from
Perl to C back and forth inclusive converting arguments all the
time. Due to that it is B<even slower> than the plain Perl fibonacci
function. But we wanted to learn that lesson.

=head3 Xsub frontend, recursion in plain C

Fibonacci, again.

We can define a plain C function in our .xs file B<before> the
C<MODULE>/C<PACKAGE> declaration line so it isn't handled as an xsub.

Because it is plain C outside of XS we need to take care the function
does not conflict with others. Therefore we make it C<static> to not
being exported at linking:

 static int fib(n) {
     if (n < 2)
        return 1;
     else
        return fib(n-2) + fib(n-1);
 }

Now the recursion is in plain C only.

Then declare a non-recursive frontend xsub as usual:

 int
 fib(n)
         int n;
         CODE:
                 RETVAL = fib(n);
         OUTPUT:
                 RETVAL

That is extremely fast. A C<fib(32)> on my netbook takes 10s in plain
Perl, 16s with the overkill-style XS and 0.04s with the XS frontend
function to plain C recursion.

=head3 Intermediate summary

We now have general recursion in our portfolio. The overkill example
which goes back and forth between C and Perl is obviously silly but
cleared the way for understanding the neccessary separation of a
frontend XS function and the recursion in plain C.

That's it for day 4.
